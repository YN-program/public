<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSS on ImageDiagnosis &amp; Program</title>
    <link>https://progress-advance.com/tags/css/</link>
    <description>Recent content in CSS on ImageDiagnosis &amp; Program</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 16 Feb 2023 10:59:45 +0900</lastBuildDate><atom:link href="https://progress-advance.com/tags/css/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【CSS】grid layout -その４- justify-self, align-selfなど</title>
      <link>https://progress-advance.com/programming/grid4/</link>
      <pubDate>Thu, 16 Feb 2023 10:59:45 +0900</pubDate>
      
      <guid>https://progress-advance.com/programming/grid4/</guid>
      <description>&lt;p&gt;&lt;code&gt;margin&lt;/code&gt;や&lt;code&gt;justify-self&lt;/code&gt;, &lt;code&gt;align-self&lt;/code&gt;, &lt;code&gt;place-self&lt;/code&gt;, &lt;code&gt;justify-items&lt;/code&gt;, &lt;code&gt;align-items&lt;/code&gt;, &lt;code&gt;place-items&lt;/code&gt;などを使用して、グリッドアイテムを配置。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【CSS】grid layout -その３- auto-fillとauto-fit</title>
      <link>https://progress-advance.com/programming/css-grid-auto-fill-vs-auto-fit/</link>
      <pubDate>Sun, 05 Feb 2023 23:36:02 +0900</pubDate>
      
      <guid>https://progress-advance.com/programming/css-grid-auto-fill-vs-auto-fit/</guid>
      <description>&lt;p&gt;グリッドレイアウトのその３。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;repeat()&lt;/code&gt;と&lt;code&gt;minmax()&lt;/code&gt;、&lt;code&gt;auito-fit&lt;/code&gt;、&lt;code&gt;auto-fill&lt;/code&gt;の使用例。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【CSS】grid layout -その２-</title>
      <link>https://progress-advance.com/programming/grid2/</link>
      <pubDate>Wed, 01 Feb 2023 11:14:35 +0900</pubDate>
      
      <guid>https://progress-advance.com/programming/grid2/</guid>
      <description>&lt;p&gt;グリッドレイアウトの基本の続きです。&lt;/p&gt;
&lt;p&gt;各要素の名前、グリッド線名によるアイテムの配置、および&lt;code&gt;minmax()&lt;/code&gt;などについて。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【CSS】grid layout -その１-</title>
      <link>https://progress-advance.com/programming/grid1/</link>
      <pubDate>Mon, 30 Jan 2023 23:33:32 +0900</pubDate>
      
      <guid>https://progress-advance.com/programming/grid1/</guid>
      <description>&lt;p&gt;グリッドレイアウトが便利なので、基本的なことから学んだことを複数回に分けて記載していきたいと思います。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Inputタグを使わないrange slider</title>
      <link>https://progress-advance.com/programming/range-without-input/</link>
      <pubDate>Fri, 20 Jan 2023 16:38:52 +0900</pubDate>
      
      <guid>https://progress-advance.com/programming/range-without-input/</guid>
      <description>&lt;p&gt;inputタグを使わないレンジスライダーを自作しました。&lt;/p&gt;
&lt;p&gt; 


&lt;style&gt;

.slider_wrapper {
    width:100%;
    height:30px;
    background:rgba(246,246,255,1);
    border-radius:15px;
    position:relative;
    box-shadow:2px 5px 3px gray;
}
.slider_subwrapper {
    width:90%;
    height:30px;
    display:block;
    position:relative;
    margin:0 auto;
    cursor:pointer;
    background:inherit;
    z-index:200;
}
.slider_baloon {
    position: absolute;
    display: none;
    text-align:center;
    padding: 0 2px;
    background-color: rgba(82, 82, 82, 0.5);
    color:#fff;
    left : 5%;
    bottom : 100%;
    margin-bottom : 5px;
    font-size:;
    border-radius:7px;
}
.slider_wrapper:hover .slider_baloon {
    display:block;
}
.slider_thumb {
    position: absolute;
    display: block;
    text-align:center;
    background: rgba(163,163,255,1);
    width:12px;
    height:12px;
    left : 0%;
    top : 10px;
    border-radius:50%;
    box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, 0.2);
    cursor:pointer;
    z-index:100;
}
.slider {
    width:100%;
    height:4px;
    background:#fff;
    cursor:pointer;
    position:absolute;
    top:13px;
    left:0%;
}
.slider_progress {
    height:4px;
    background: rgba(163,163,255,1);
    cursor:pointer;
}

&lt;/style&gt;
&lt;body&gt;


&lt;div id=&#34;slider_wrapper&#34;  class=&#34;slider_wrapper&#34;&gt;
    &lt;div id=&#34;slider_subwrapper&#34; class=&#34;slider_subwrapper&#34;&gt;
        &lt;span id=&#34;slider_baloon&#34; class=&#34;slider_baloon&#34;&gt;&lt;/span&gt;
        &lt;div id=&#34;slider&#34; class=&#34;slider&#34; role=&#34;slider&#34;&gt;
            &lt;div id=&#34;progress_slider&#34;&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;span id=&#34;slider_thumb&#34; class=&#34;slider_thumb&#34;&gt;&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;/body&gt;

&lt;script&gt;

const progressSlider    = document.getElementById(&#34;progress_slider&#34;),
      slider            = document.getElementById(&#34;slider&#34;),
      sliderSubWrapper  = document.getElementById(&#34;slider_subwrapper&#34;),
      sliderThumb       = document.getElementById(&#34;slider_thumb&#34;),
      text              = document.getElementById(&#34;slider_baloon&#34;);

let WidthX, rect, thumbRate;
let x = 0;
let mousedownFlag = false;

sliderSubWrapper.ontouchstart =
sliderSubWrapper.onmousedown  = mousedownSlider;

sliderSubWrapper.ontouchend    =
sliderSubWrapper.onmouseup     =
sliderSubWrapper.onmouseleave  =
sliderSubWrapper.ontouchcancel = mouseupSlider;

sliderSubWrapper.onmouseenter =
sliderSubWrapper.ontouchmove  =
sliderSubWrapper.onmousemove  = moveSlider;


function mouseX(e) {
    rect = sliderSubWrapper.getBoundingClientRect();
    if (e.touches &amp;&amp; e.touches[0]) {
        x = (e.touches[0].clientX - window.pageXOffset - rect.left)
    } else if (e.clientX &amp;&amp; e.clientY) {
        x = (e.clientX - window.pageXOffset - rect.left) //e.offsetXではマウスがthumbの上にあるときにうまく行かない。
    }
    if ( x &lt; 0 ){
        WidthX = 0
    } else if ( x &gt; sliderSubWrapper.clientWidth){
        WidthX = 100
    } else {
        WidthX = Math.round(x / sliderSubWrapper.clientWidth * 100);
    }
    return WidthX;
}
function setProgressSlider (WidthX) {
    progressSlider.style.width =  WidthX + &#39;%&#39;;
    progressSlider.classList.add(&#34;slider_progress&#34;);
    sliderThumb.style.left = WidthX * thumbRate + &#34;%&#34;;
}
function mousedownSlider(e){
    e.preventDefault();
    slider.style.background = `#fff`;
    mousedownFlag = true;
    WidthX = mouseX(e);
    setProgressSlider(WidthX);
    text.style.left = WidthX + &#34;%&#34;;
    text.innerText  = WidthX + &#34;%&#34;;
}
function mouseupSlider(e){
    e.preventDefault();
    if (mousedownFlag){
        mousedownFlag = false;
        setProgressSlider(WidthX);
    }else{
        slider.style.background = `#fff`;
        mousedownFlag = false;
    }
}
function moveSlider(e){
    e.preventDefault();
    WidthX = mouseX(e);
    text.style.left = WidthX + &#34;%&#34;;
    text.innerText  = WidthX + &#34;%&#34;;
    if(mousedownFlag){
        setProgressSlider(WidthX);
    } else {
        slider.style.background = `linear-gradient(to right, rgba(163,163,255,0.4) 0%, rgba(163,163,255,0.4) ${WidthX}%, #fff ${WidthX}%, #fff 100%)`
    }
}

thumbRate = sliderSubWrapper.clientWidth / ( sliderSubWrapper.clientWidth + sliderThumb.clientWidth);


&lt;/script&gt;


&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【CSS】メディアクエリ orientation,hover, etc.</title>
      <link>https://progress-advance.com/programming/mediaquery/</link>
      <pubDate>Tue, 10 Jan 2023 09:52:59 +0900</pubDate>
      
      <guid>https://progress-advance.com/programming/mediaquery/</guid>
      <description>&lt;p&gt;メディアクエリは、画面サイズや画面解像度などの閲覧状況に応じて、cssを切り替えることができる。便利なところをメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【CSS】要素幅、高さをコントロールするプロパティのメモ</title>
      <link>https://progress-advance.com/programming/vw-vh-vmin-vmax/</link>
      <pubDate>Sun, 08 Jan 2023 11:22:46 +0900</pubDate>
      
      <guid>https://progress-advance.com/programming/vw-vh-vmin-vmax/</guid>
      <description>&lt;p&gt;&lt;code&gt;max-content&lt;/code&gt;, &lt;code&gt;min-content&lt;/code&gt;, &lt;code&gt;fit-content&lt;/code&gt;, &lt;code&gt;min-width&lt;/code&gt;, &lt;code&gt;max-width&lt;/code&gt;, &lt;code&gt;min-height&lt;/code&gt;, &lt;code&gt;max-height&lt;/code&gt;, &lt;code&gt;vw&lt;/code&gt;, &lt;code&gt;vh&lt;/code&gt;, &lt;code&gt;vmax&lt;/code&gt;, &lt;code&gt;vmin&lt;/code&gt;,&lt;code&gt;aspect-ratio&lt;/code&gt;についてのメモです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【CSS】input type=&#39;range&#39; のカスタマイズ</title>
      <link>https://progress-advance.com/programming/input-range/</link>
      <pubDate>Wed, 04 Jan 2023 14:56:00 +0900</pubDate>
      
      <guid>https://progress-advance.com/programming/input-range/</guid>
      <description>&lt;p&gt;input rangeを自作しました。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;::-webkit-slider-thumb&lt;/code&gt;は非推奨のようなので、スライダーの&amp;quot;ポチ&amp;quot;も自作。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
